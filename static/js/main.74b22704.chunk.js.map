{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","basicUrl","options","className","key","this","alt","src","getImgURL","id","Component","CardList","card_list","card_components","map","robot","render","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","setState","App","onSearch","event","target","value","robots","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"6OAyBeA,E,YAtBb,WAAYC,EAAOC,EAAUC,GAAU,IAAD,8BACpC,+CACKF,MAAQA,EACb,EAAKC,SAAWA,EAChB,EAAKC,QAAUA,EAJqB,E,sEAOpC,OACE,yBAAKC,UAAY,sDAAsDC,IAAO,QAAUC,KAAKL,MAAL,IACtF,yBAAKM,IAAM,UAAUC,IAAKF,KAAKG,UAAUH,KAAKL,MAAL,MACzC,6BACE,4BAAKK,KAAKL,MAAL,MACL,2BAAIK,KAAKL,MAAL,W,gCAKFS,GACR,OAAOJ,KAAKJ,SAAWQ,EAAKJ,KAAKH,Y,GAnBlBQ,aCwBJC,EAnBE,SAAC,GAAqB,IACjCC,EADgC,EAAnBC,gBACeC,KAAI,SAACC,GAAS,OAAO,IAAIhB,EAAKgB,EAL/C,wBACD,iBAI0EC,YAExF,OACE,6BACGJ,ICGQK,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC/B,OACE,yBAAKhB,UAAU,OACb,2BACEA,UAAU,+BACViB,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCDLI,MANf,SAAgBvB,GACd,OAAO,yBAAKwB,MAAO,CAACC,UAAW,SAAUC,OAAS,kBAAmBC,OAAQ,UAC1E3B,EAAM4B,SADF,MCsBMC,E,YAtBb,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KACD8B,MAAQ,CACXC,UAAW,GAHI,E,+EAODC,EAAOC,GACvB5B,KAAK6B,SAAS,CAACH,UAAW,M,+BAI1B,OAAG1B,KAAKyB,MAAMC,SACL,0CAGA1B,KAAKL,MAAM4B,a,GAjBGlB,aC+DZyB,G,kBAzDb,aAAe,IAAD,8BACZ,+CAmBFC,SAAW,SAACC,GACV,EAAKH,SAAS,CACZhB,YAAamB,EAAMC,OAAOC,SApB5B,EAAKT,MAAQ,CACXU,OAAQ,GACRtB,YAAa,IAJH,E,iFAQO,IAAD,OAClBuB,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MACC,SAAAG,GACE,EAAKX,SAAS,CAACM,OAAQK,S,+BAWnB,IAAD,OACDC,EAAiBzC,KAAKyB,MAAMU,OAAOO,QAAO,SAAAhC,GAC9C,OAAOA,EAAMiC,KAAKC,cAAcC,SAAS,EAAKpB,MAAMZ,YAAY+B,kBAGlE,OAAgC,IAA7B5C,KAAKyB,MAAMU,OAAOW,OAEjB,yBAAKhD,UAAY,MACf,wBAAIA,UAAY,MAAhB,kBAMF,yBAAKA,UAAY,MACf,wBAAIA,UAAY,MAAhB,mBACA,kBAAC,EAAD,CAAWgB,aAAgBd,KAAK+B,WAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUvB,gBAAiBiC,W,GA9CvBpC,cCKE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASzC,OAAO,kBAAC,EAAD,MAAQ0C,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,a","file":"static/js/main.74b22704.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Card extends Component {\r\n  constructor(props, basicUrl, options) {\r\n    super();\r\n    this.props = props;\r\n    this.basicUrl = basicUrl;\r\n    this.options = options;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className = 'tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5' key = {\"robot\" + this.props['id']}>\r\n        <img alt = \"Profile\" src={this.getImgURL(this.props['id'])}/>\r\n        <div>\r\n          <h3>{this.props['name']}</h3>\r\n          <p>{this.props['email']}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  getImgURL(id) {\r\n    return this.basicUrl + id + this.options;\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst robohash = \"https://robohash.org/\";\r\nconst options = \"?size=200x200\";\r\n\r\n\r\nconst CardList = ({card_components})=>{\r\n  let card_list = card_components.map((robot)=>{return new Card(robot, robohash, options).render()});\r\n\r\n  return (\r\n    <div>\r\n      {card_list}\r\n    </div>\r\n  );\r\n}\r\n// const CardList = (props) => {\r\n//   let card_list = props.card_components.map((robot)=>{return new Card(robot, robohash, options).render()});\r\n//\r\n//   return (\r\n//     <div>\r\n//       {card_list}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange})=> {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba bg-white b--dark-pink\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange = {searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nfunction Scroll(props) {\r\n  return <div style={{overflowY: 'scroll', border : '5px solid black', height: '600px'}}>\r\n    {props.children};\r\n  </div>;\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError : false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError : true});\r\n  }\r\n\r\n  render() {\r\n    if(this.state.hasError) {\r\n      return <h1>Has Error!</h1>;\r\n    }\r\n    else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(\r\n      users => {\r\n        this.setState({robots: users});\r\n      }\r\n    );\r\n  }\r\n\r\n  onSearch = (event) => {\r\n    this.setState({\r\n      searchfield: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    });\r\n\r\n    if(this.state.robots.length === 0) {\r\n      return (\r\n        <div className = \"tc\">\r\n          <h1 className = 'f1'> Loading.... </h1>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div className = \"tc\">\r\n          <h1 className = 'f1'> Robot Friends </h1>\r\n          <SearchBox searchChange = {this.onSearch}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList card_components={filteredRobots}/>\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}